1---------2---------3---------4---------5---------6---------7---------8---------


What happens when you initialize a repository? Why do you need to do it?

Meta data is added to the folder.  It needs to be done so that changes made in 
the repository can be tracked.


-----

How is the staging area different from the working directory and the 
repository? 

The staging area 'contains' the items that have been added to the repository, 
but not yet committed.  The working directory contains all the files in that OS
directory.  They may or may not have been added and/or committed.

What value do you think it offers?

It would seem to give the user additional control over what he/she wants 
associated with each construct, and/or the 'status' they want to give each 
file.


-----

How can you use the staging area to make sure you have one commit per logical 
change?

The staging area allows you to explicitely define what files will be committed.


-----

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

 - When creating a new feature that you're not sure will be implemented.
 - When experimenting.
 - When creating a different version in parallel.

Branches will allow you to pursue these other options without disrupting the 
regular maintenance of the master branch.


-----

How do the diagrams help you visualize the branch structure?

They are a visual representation of the branch structure.  It allows me to 
'see' the branching in my head.


-----

What is the result of merging two branches together? 

All of the previous changes in both branches are merged together.  One branch 
is merged into the other.  The new commit has both branches as parents.  All commits from both branches are still accessible from the newly merged branch.

Why do we represent it in the diagram the way we do?

To show that all commits that were accessible from merged branches are still accessible. 


-----





